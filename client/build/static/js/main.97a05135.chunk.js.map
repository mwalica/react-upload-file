{"version":3,"sources":["components/ImageInput.js","components/ImageInputLoad.js","App.js","GlobalStyle.js","index.js"],"names":["Wrapper","styled","div","Button","ImageInput","name","imageHandler","fileInputRef","useRef","onClick","current","click","type","ref","accept","onChange","ImageInputLoad","Image","App","useState","setFile","setFilename","uploadedFile","setUploadedFile","loading","setLoading","e","a","target","files","formData","FormData","append","axios","post","headers","res","data","fileName","filePath","response","status","console","log","msg","autoComplete","src","alt","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qzBAGA,IAmBMA,EAAUC,IAAOC,IAAV,KAKPC,EAASF,IAAOC,IAAV,KAoBGE,EA5CI,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aACpBC,EAAeC,iBAAO,MAE5B,OACE,kBAACR,EAAD,KACE,kBAACG,EAAD,CAAQM,QAAS,kBAAMF,EAAaG,QAAQC,UAC1C,2CACA,2BACEC,KAAK,OACLP,KAAMA,EACNQ,IAAKN,EACLO,OAAO,kBACPC,SAAUT,O,uhDCZpB,IAUMN,EAAUC,IAAOC,IAAV,KAMPC,EAASF,IAAOC,IAAV,KA6DGc,EA7EQ,WACrB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,iD,8dCAR,IAqDMhB,EAAUC,IAAOC,IAAV,KAoBPe,EAAQhB,IAAOC,IAAV,KAQIgB,EAjFH,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACHC,GADG,aAEgBD,mBAAS,IAFzB,mBAECE,GAFD,aAGwBF,mBAAS,MAHjC,mBAGTG,EAHS,KAGKC,EAHL,OAIcJ,oBAAS,GAJvB,mBAITK,EAJS,KAIAC,EAJA,KAMVnB,EAAY,uCAAG,WAAOoB,GAAP,uBAAAC,EAAA,6DACnBP,EAAQM,EAAEE,OAAOC,MAAM,IACvBR,EAAYK,EAAEE,OAAOC,MAAM,GAAGxB,OAExByB,EAAW,IAAIC,UACZC,OAAO,OAAQN,EAAEE,OAAOC,MAAM,IACvCJ,GAAW,GANQ,kBAQCQ,IAAMC,KAAK,+BAAgCJ,EAAU,CACrEK,QAAS,CACP,eAAgB,yBAVH,OAQXC,EARW,SAccA,EAAIC,KAA3BC,EAdS,EAcTA,SAAUC,EAdD,EAcCA,SAElBhB,EAAgB,CAAEe,WAAUC,aAC5Bd,GAAW,GAjBM,kDAmBW,MAAxB,KAAIe,SAASC,OACfC,QAAQC,IAAI,uCAEZD,QAAQC,IAAI,KAAIH,SAASH,KAAKO,KAEhCnB,GAAW,GAxBM,0DAAH,sDA4BlB,OACE,kBAAC,EAAD,KACE,4CACA,0BAAMoB,aAAa,OAChBrB,EACC,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAYnB,KAAK,OAAOC,aAAcA,KAGzCgB,GACC,kBAACL,EAAD,KACE,yBAAK6B,IAAKxB,EAAaiB,SAAUQ,IAAI,e,0UCnD/C,IAeeC,EAfKC,YAAH,KCIjBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.97a05135.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ImageInput = ({ name, imageHandler }) => {\r\n  const fileInputRef = useRef(null);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Button onClick={() => fileInputRef.current.click()}>\r\n        <span>Add photo</span>\r\n        <input\r\n          type=\"file\"\r\n          name={name}\r\n          ref={fileInputRef}\r\n          accept=\".jpg,.png,.jpeg\"\r\n          onChange={imageHandler}\r\n        />\r\n      </Button>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 2em 0;\r\n  width: 100%;\r\n`;\r\n\r\nconst Button = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  width: 100%;\r\n  padding: 0.4em 1em;\r\n  background-color: orange;\r\n  color: rgba(255, 255, 255, 0.9);\r\n  font-size: 1rem;\r\n  border-radius: 0.2em;\r\n  transition: color 0.4s ease;\r\n  &:hover {\r\n    color: rgba(255, 255, 255, 0.6);\r\n  }\r\n  input {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nexport default ImageInput;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ImageInputLoad = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Button>\r\n        <span>Loaded photo</span>\r\n      </Button>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 2em 0;\r\n  width: 100%;\r\n \r\n`;\r\n\r\nconst Button = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  width: 100%;\r\n  padding: 0.4em 1em;\r\n  background-color: orange;\r\n  color: rgba(255, 255, 255, 0.9);\r\n  font-size: 1rem;\r\n  border-radius: 0.2em;\r\n  &::before {\r\n    position: absolute;\r\n    content: \"\";\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(255, 255, 255, 0.1);\r\n    animation-name: scale-in-hor-left;\r\n    animation-duration: 2s;\r\n    animation-iteration-count: infinite;\r\n    animation-timing-function: ease;\r\n  }\r\n\r\n  @-webkit-keyframes scale-in-hor-left {\r\n  0% {\r\n    -webkit-transform: scaleX(0);\r\n            transform: scaleX(0);\r\n    -webkit-transform-origin: 0% 0%;\r\n            transform-origin: 0% 0%;\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    -webkit-transform: scaleX(1);\r\n            transform: scaleX(1);\r\n    -webkit-transform-origin: 0% 0%;\r\n            transform-origin: 0% 0%;\r\n    opacity: 1;\r\n  }\r\n}\r\n@keyframes scale-in-hor-left {\r\n  0% {\r\n    -webkit-transform: scaleX(0);\r\n            transform: scaleX(0);\r\n    -webkit-transform-origin: 0% 0%;\r\n            transform-origin: 0% 0%;\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    -webkit-transform: scaleX(1);\r\n            transform: scaleX(1);\r\n    -webkit-transform-origin: 0% 0%;\r\n            transform-origin: 0% 0%;\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n`;\r\n\r\nexport default ImageInputLoad;\r\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\n\nimport ImageInput from \"./components/ImageInput\";\nimport ImageInputLoad from \"./components/ImageInputLoad\";\n\nconst App = () => {\n  const [file, setFile] = useState(\"\");\n  const [filename, setFilename] = useState(\"\");\n  const [uploadedFile, setUploadedFile] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const imageHandler = async (e) => {\n    setFile(e.target.files[0]);\n    setFilename(e.target.files[0].name);\n\n    const formData = new FormData();\n    formData.append(\"file\", e.target.files[0]);\n    setLoading(true);\n    try {\n      const res = await axios.post(\"http://localhost:5000/upload\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      });\n\n      const { fileName, filePath } = res.data;\n\n      setUploadedFile({ fileName, filePath });\n      setLoading(false);\n    } catch (err) {\n      if (err.response.status === 500) {\n        console.log(\"There was a problem with the server\");\n      } else {\n        console.log(err.response.data.msg);\n      }\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Wrapper>\n      <h1>Image Upload</h1>\n      <form autoComplete=\"off\">\n        {loading ? (\n          <ImageInputLoad />\n        ) : (\n          <ImageInput name=\"file\" imageHandler={imageHandler} />\n        )}\n      </form>\n      {uploadedFile && (\n        <Image>\n          <img src={uploadedFile.filePath} alt=\"Preview\" />\n        </Image>\n      )}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  margin: 0 auto;\n  width: 80;\n  max-width: 760px;\n\n  padding: 1em 0;\n  h1 {\n    font-weight: 400;\n    font-size: 2.5rem;\n  }\n  form {\n    width: 100%;\n  }\n`;\n\nconst Image = styled.div`\n  width: 100%;\n  max-width: 500px;\n  img {\n    width: 100%;\n  }\n`;\n\nexport default App;\n","import {createGlobalStyle} from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n *,*::before, *::after {\r\n        box-sizing: border-box;\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n\r\n    body {\r\n        font-family: 'Roboto', sans-serif;\r\n        background-color: #fefefe;\r\n        color: #3B4C7C;\r\n        font-size: 16px;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyle;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport GlobalStyle from './GlobalStyle'\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}